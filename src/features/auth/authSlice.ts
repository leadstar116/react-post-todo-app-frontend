import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { newAlert } from "../alert/alertSlice";
import { loginApi, registerApi } from "./authApi";
import { IAuthState, IAuthParameters } from "./authInterface";

const initialState: IAuthState = {
  isLoggedIn: false,
  token: "",
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(loginAsync(email, password))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
  "auth/login",
  async (params: IAuthParameters, { dispatch }) => {
    const response = await loginApi(params);
    if (response.message) {
      dispatch(newAlert({ message: response.message, type: "error" }));
      return "";
    }
    // The value we return becomes the `fulfilled` action payload
    return response.token;
  }
);

export const registerAsync = createAsyncThunk(
  "auth/register",
  async (params: IAuthParameters, { dispatch }) => {
    const response = await registerApi(params);
    if (response.message) {
      dispatch(newAlert({ message: response.message, type: "error" }));
      return "";
    } else {
      dispatch(
        newAlert({
          message: "You are successfully registered",
          type: "success",
        })
      );
    }
    // The value we return becomes the `fulfilled` action payload
    return response.token;
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = "idle";
        if (action.payload) {
          state.token = action.payload;
          state.isLoggedIn = true;
        }
      })
      .addCase(loginAsync.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(registerAsync.pending, (state) => {
        state.status = "registering";
      })
      .addCase(registerAsync.fulfilled, (state, action) => {
        state.status = "idle";
        if (action.payload) {
          state.token = action.payload;
          state.isLoggedIn = true;
        }
      })
      .addCase(registerAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.auth.isLoggedIn)`
export const selectLoggedInStatus = (state: RootState) => state.auth.isLoggedIn;
export const selectIsLoggingIn = (state: RootState) =>
  state.auth.status === "loading";
export const selectIsRegistering = (state: RootState) =>
  state.auth.status === "registering";

export default authSlice.reducer;
